<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>Experimental Robotics Laboratory - third assignment</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This package contains the source code implemented during the third assignment of the Experimental Robotics Laboratory, course of the first semester of the second year of Robotics Engineering Master Degree course of University of Genoa, Italy.</para>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md13">
<title>Index</title>
<para><itemizedlist>
<listitem><para>Index:<itemizedlist>
<listitem><para><ulink url="#required-packages">Required packages</ulink></para>
</listitem><listitem><para><ulink url="#assignment-request">Assignment request</ulink><itemizedlist>
<listitem><para><ulink url="#before-getting-started">Before Getting Started</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#software-architecture-and-functioning">Software Architecture and Functioning</ulink></para>
</listitem><listitem><para><ulink url="#ros-nodes-description">ROS nodes description</ulink><itemizedlist>
<listitem><para><ulink url="#the-state_machine.py-node">The state_machine.py node</ulink></para>
</listitem><listitem><para><ulink url="#the-navigation.py-node">The navigation.py node</ulink></para>
</listitem><listitem><para><ulink url="#the-cluedo_kb.py-node">The cluedo_kb.py node</ulink></para>
</listitem><listitem><para><ulink url="#the-simulation.cpp-node">The simulation.cpp node</ulink></para>
</listitem><listitem><para><ulink url="#the-image_echo.cpp-node">The image_echo.cpp node</ulink></para>
</listitem><listitem><para><ulink url="#the-detectibot_magnifier.cpp-node">The detectibot_magnifier.cpp node</ulink></para>
</listitem><listitem><para><ulink url="#rqt_graph">Rqt_graph</ulink></para>
</listitem><listitem><para><ulink url="#uml-temporal-diagram">UML temporal diagram</ulink><itemizedlist>
<listitem><para><ulink url="#summarizing-working-architecture">Summarizing working architecture</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#how-to-launch-and-additional-documentation">How to launch and additional documentation</ulink><itemizedlist>
<listitem><para><ulink url="#running-the-navigation-module">Running the Navigation module</ulink></para>
</listitem><listitem><para><ulink url="#running-the-vision-module">Running the Visio module</ulink></para>
</listitem><listitem><para><ulink url="#running-the-state-machine-module">Running the State machine module</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#system-limitations">System limitations</ulink></para>
</listitem><listitem><para><ulink url="#possible-technical-improvements">Possible Technical Improvements</ulink></para>
</listitem><listitem><para><ulink url="#contact">Contact</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md14">
<title>Required packages</title>
<para><verbatim>* **ROS**
* **smach**
* **OpenCV**
* **MoveIt Frameowrk**
* **move_base**
</verbatim></para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md15">
<title>Assignment request</title>
<para>This assignment improves the architectures developed in the first and second assignments but unlike them, the environment in which the robot moves is much more complex. Indeed, it presents several rooms, and 30 ArUco markers (5 markers for each room)</para>
<para>This time, each marker corresponds to a hint, which are always given with the following structure:</para>
<para><programlisting><codeline><highlight class="normal">int32<sp/>ID</highlight></codeline>
<codeline><highlight class="normal">string<sp/>key</highlight></codeline>
<codeline><highlight class="normal">string<sp/>value</highlight></codeline>
</programlisting></para>
<para>Also, markers may me in three different positions: placed on the walls (height 1 m ca.), and on the floor (placed vertically or horizonally).</para>
<para>The idea is the same of the previous two assignment: the robot should keep receiving hints until it has a complete and consistent hypothesis. However, as in the previous assignments, only one ID source is the trustable one.</para>
<para>As soon as the robot gets a complete hypothesis, it should go in the center of the arena (<bold>x=0.0</bold>, <bold>y=-1.0</bold>, which should be also the starting position of the robot) and «tells» its solution.</para>
<para>If the solution is the correct one, the game ends.</para>
<para><blockquote><para><bold>REMARK</bold> x and y coordinates belonging to each room&apos;s point where known a priori as shown in the table below <linebreak/>
 </para>
</blockquote><verbatim>| room  | x,y coordinates  |
|--|--|
| Room1 | ( -4 , -3 ) |
| Room2 | ( -4 , +2 ) |
| Room3 | ( -4 , +7 ) |
| Room4 | ( 5 , -7 )  |
| Room5 | ( 5 , -3 )  |
| Room6 | ( 5 , +1 )  |
</verbatim></para>
<para>There are different values for z, meaning that the robot needs to be able to reach them with it&apos;s arm, precisely with its <emphasis>cluedo_link</emphasis>.</para>
<para>Concerining the simulation environment, there are small walls around the robot aimed at impeding the movements of its mobile base</para>
<para>Hence the robot moves from one «hint» coordinate to another one, while receiving hints. This holds until it has a complete and consistent hypothesis</para>
<para>Please consider that <bold>consistent hypothesis</bold> have been defined as COMPLETED but NOT INCONSISTENT</para>
<para><blockquote><para><emphasis>REMARK</emphasis> A consistent hypothesis is defined as <emphasis>completed</emphasis> when there occurs one role for each class (i.e., one occourence of what, one occourence for who, one occourence for where ). </para>
</blockquote>A straightforward example of such hypothesis is [ID2][12], whose definition is here below reported</para>
<para><programlisting filename=".txt"><codeline><highlight class="normal"><ref refid="_r_e_a_d_m_e_8md_8txt_1ab8d5f8942208cd797e1386c9060482bb" kindref="member">ID2_1</ref>:<sp/>[</highlight><highlight class="stringliteral">&apos;where&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Study&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><ref refid="_r_e_a_d_m_e_8md_8txt_1ae7cabc3e5acb50c2cffb17d0ee74368f" kindref="member">ID2_2</ref>:<sp/>[</highlight><highlight class="stringliteral">&apos;who&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Col.Mustard&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"><ref refid="_r_e_a_d_m_e_8md_8txt_1aa9f57c8de9d14951a09170fd65fe37ad" kindref="member">ID2_3</ref>:<sp/>[</highlight><highlight class="stringliteral">&apos;what&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Rope&apos;</highlight><highlight class="normal">]</highlight></codeline>
</programlisting></para>
<para>As in the first assignment:<itemizedlist>
<listitem><para>only one ID source is the trustable one.</para>
</listitem><listitem><para>Whenever a robot gets a complete hypothesis, it should go in the center of the arena</para>
</listitem><listitem><para>Once the center has been reached, it should «tell» its solution (as in the first assignment).</para>
</listitem><listitem><para>If the solution is the <bold>correct one</bold>, the game ends</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md16">
<title>Before Getting Started</title>
<para>In order to find the marker models, befire the build, navigate through the directories:</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">cd<sp/>/ros_ws/src/ExperimentalRoboticsAssignment3/erl3/models</highlight></codeline>
</programlisting></para>
<para>copy all files inside the <computeroutput>erl3</computeroutput> models folder and navigate to the <computeroutput>root/.gazebo</computeroutput> directory</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">cd<sp/>/root/.gazebo/models</highlight></codeline>
</programlisting></para>
<para>paste the previously copied files, containing all the marker&apos;s models.</para>
<para>Then you can build the workspace.</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md17">
<title>Software Architecture and Functioning</title>
<para>The most relevant aspects of the project and a brief video tutorial on how to launch the simulation can be found here below</para>
<para><ulink url="https://user-images.githubusercontent.com/61761835/188322232-e940bd45-e460-4505-8004-16a02879690c.mp4">https://user-images.githubusercontent.com/61761835/188322232-e940bd45-e460-4505-8004-16a02879690c.mp4</ulink></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md18">
<title>ROS nodes description</title>
<para>Here there is the UML components diagram of the project</para>
<para><image type="html" name="component_diagram.jpg" inline="yes"></image>
</para>
<para>The aforementioned architechture can be seen as a <bold>deliberative</bold> one, being its pipeline structured as *&quot;sense-plan-act&quot;* More specifically, there are <emphasis>three types</emphasis> of sense in this architechture<itemizedlist>
<listitem><para><bold>Vision</bold>: It is implemented by means of Aruco and OpenCV frameworks</para>
</listitem><listitem><para><bold>Localisation</bold>: It is implemented by means of the Odom topic, in Gazebo</para>
</listitem><listitem><para><bold>Mapping</bold>: made possible by laser sensors and GMAPPING algorithm</para>
</listitem></itemizedlist>
</para>
<para>Moreover:<itemizedlist>
<listitem><para>Concerning the *&quot;plan&quot;* module, it is implemented through a <bold>Smach</bold> state machine</para>
</listitem><listitem><para>Finally, the <computeroutput>move_base</computeroutput> pkg is responsible for the detectibot&apos;s movement around the environment</para>
</listitem><listitem><para>The mapping is performed using <bold>SLAM GMAPPING</bold> module</para>
</listitem></itemizedlist>
</para>
<para>Modules:</para>
<para><itemizedlist>
<listitem><para><bold><ref refid="cluedo__kb_8py" kindref="compound">cluedo_kb.py</ref></bold></para>
</listitem><listitem><para><bold><ref refid="navigation_8py" kindref="compound">navigation.py</ref></bold></para>
</listitem><listitem><para><bold><ref refid="state__machine_8py" kindref="compound">state_machine.py</ref></bold></para>
</listitem><listitem><para><bold><ref refid="simulation_8cpp" kindref="compound">simulation.cpp</ref></bold></para>
</listitem><listitem><para><bold><ref refid="img__echo_8cpp" kindref="compound">img_echo.cpp</ref></bold></para>
</listitem><listitem><para><bold><ref refid="detectibot__magnifier_8cpp" kindref="compound">detectibot_magnifier.cpp</ref></bold></para>
</listitem></itemizedlist>
</para>
<para>(<ulink url="#top">back to top</ulink>)</para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md19">
<title>The state_machine.py node</title>
<para><image type="html" name="erl_assignment_3_state_machine_py.jpg" inline="yes"></image>
 </para>
<para>It implements a state machine that controls the operations of the robot using <bold>smach_ros</bold></para>
<para>In particular the machine organises the investigation into four states.<itemizedlist>
<listitem><para><bold>move</bold> → moves the robot between rooms inside the simulated indoor environment</para>
</listitem><listitem><para><bold>collect</bold> → the robot rotates on itself to read the largest number of hints within the room</para>
</listitem><listitem><para><bold>check</bold> → takes hints from the sensing system via a service, and uses the ontology to work out whether there are possible solutions or not. If there occurs no possible solutions, the outcome is <computeroutput>mistery_not_solvable</computeroutput>, and the robot transitions back to the &quot;move&quot; state. Otherwise, if there actually occurs possible solutions, the state machine makes a transition to the &quot;show&quot; state, responsible for querying the oracle about the solution&apos;s truthfulness</para>
</listitem><listitem><para><bold>show</bold> → questions the oracle about the solution</para>
</listitem></itemizedlist>
</para>
<para>Here below we can find a hand-made state diagram, representing how the system works </para>
<para><image type="html" name="state_diagram.jpg" inline="yes"></image>
 </para>
<para>Thanks to smach, we can visualize the state of the state machine in which the program is running. Just type: <programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>smach_viewer<sp/>smach_viewer.py</highlight></codeline>
</programlisting></para>
<para><blockquote><para><emphasis>REMARK:</emphasis> Please, remember to import the correct libraries (i.e <computeroutput>import smach, smach_ros</computeroutput>) otherwise some errors may occur! </para>
</blockquote></para>
<para><image type="html" name="188338883-71fa5cc8-ad81-4621-87c5-35a7ca21c44a.gif" inline="yes"></image>
</para>
<para>Node interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/state_machine]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/state_machine/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/state_machine/set_logger_level</highlight></codeline>
</programlisting></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md20">
<title>The navigation.py node :knot:</title>
<para><image type="html" name="erl_assignment_3_navigation_py.jpg" inline="yes"></image>
 </para>
<para>This node implements two different services aimed at letting the robot reach different rooms and to collect hints. The <computeroutput>/go_to_point</computeroutput> service this time implements MoveBase and waits until the robot hasn&apos;t reached the given target.</para>
<para>The <computeroutput>/turn_robot</computeroutput> service listens for a request containing the angular velocity around x to keep, and the time during which the robot has to turn at a specific angular velocity.</para>
<para><itemizedlist>
<listitem><para>The <bold>move_base</bold> module combines a global and a local planner and provides a much more robust navigation module than the previously used.</para>
</listitem><listitem><para>In addition the navigation service provides a <bold>service</bold> to rotate the robot (erl_assignment_3_msgs/TurnRobot) by a certain angle speed for a certain time; this functionality is necessary for the collection of clues.</para>
</listitem></itemizedlist>
</para>
<para>Node Interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/navigation]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/cmd_vel<sp/>[geometry_msgs/Twist]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/move_base/cancel<sp/>[actionlib_msgs/GoalID]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/move_base/goal<sp/>[move_base_msgs/MoveBaseActionGoal]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/odom<sp/>[nav_msgs/Odometry]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/go_to_point</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/navigation/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/navigation/set_logger_level</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/turn_robot</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md21">
<title>The cluedo_kb.py node</title>
<para><image type="html" name="erl_assignment_3_cluedo_kb_py.jpg" inline="yes"></image>
 </para>
<para>This node represents the knowledge base of the robot, allowing for storing and processing of hypotheses, and interrogation of the oracle in order to check if the problem is being resolved.</para>
<para>More specifically, When the robot starts roaming around looking for Aruco markers, (where the hints&apos; IDs are stored), it makes a service request through <computeroutput>/add_hint</computeroutput> for soliciting the oracle to announce the found hint. This latter, consists in a request of type <computeroutput>erl3/Marker</computeroutput> here below reported</para>
<para><programlisting filename=".Plain"><codeline><highlight class="normal">#<sp/>erl3/Marker<sp/>service<sp/>implementation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int32<sp/>markerId</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">#<sp/>erl3/ErlOracle<sp/>oracle_hint</highlight></codeline>
<codeline><highlight class="normal">ErlOracle<sp/>oracle_hint</highlight></codeline>
</programlisting></para>
<para>Since could happen that sometimes the Oracle sends a wrong hint (i.e. it may occurs that some fields are empty strings and/or some fields has value -1), a function responsible for checking its quality, has been implemented.</para>
<para>Node interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/cluedo_kb]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/add_hint</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/cluedo_kb/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/cluedo_kb/set_logger_level</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/get_id</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/mark_wrong_id</highlight></codeline>
</programlisting></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md22">
<title>The simulation.cpp node</title>
<para><image type="html" name="erl3_final_oracle_cpp.jpg" inline="yes"></image>
 </para>
<para>The architecture is based on the <ref refid="simulation_8cpp" kindref="compound">simulation.cpp</ref> node which is the same node we were provided by our Professors Implements two services:<itemizedlist>
<listitem><para>1. (/oracle_hint [erl3/Marker]), once it has been provided with a certain ID, it returns the clue corresponding to that ID (Identifier of an index in an array of messages yield by the oracle)</para>
</listitem><listitem><para>2. Concerning the second one (/oracle_solution [erl3/Oracle]), it is needed to check the correctness of a proposed hypothesis at the end of the case</para>
</listitem></itemizedlist>
</para>
<para>Node interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/final_oracle]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/final_oracle/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/final_oracle/set_logger_level</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/oracle_hint</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/oracle_solution</highlight></codeline>
</programlisting></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md23">
<title>The img_echo.cpp node</title>
<para><image type="html" name="erl_assignment_3_img_echo_cpp.jpg" inline="yes"></image>
 </para>
<para>Briefly, this node reads the input image from the robot&apos;s camera. Secondly, it print it on a floating window, namely DetectiCAm, by means of a <computeroutput>cv_ptr</computeroutput>. (the <computeroutput><ref refid="namespacecv__bridge_1a1be6ad7c0a2d37ef773198f59ed2f456" kindref="member">cv_bridge::CvImagePtr</ref> cv_ptr</computeroutput> returns a ROS image into an appropriate format compatible with OpenCV). It then publishes the video stream.</para>
<para><image type="html" name="188857662-adec563d-f4ec-4517-bd43-c74b1b9261d7.gif" inline="yes"></image>
</para>
<para><blockquote><para>Further Remark: ImageTransport&apos;s methods have been employed for creating image publishers and subscribers, being <computeroutput>image_transport</computeroutput> a package that provides transparetn support for transporting images in low-bandwidth compressed formats. </para>
</blockquote></para>
<para>Node interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/img_echo]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo<sp/>[sensor_msgs/Image]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressed<sp/>[sensor_msgs/CompressedImage]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressed/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressed/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressedDepth<sp/>[sensor_msgs/CompressedImage]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressedDepth/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressedDepth/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/theora<sp/>[theora_image_transport/Packet]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/theora/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/theora/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw<sp/>[sensor_msgs/Image]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressed/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/compressedDepth/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/set_logger_level</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/img_echo/theora/set_parameters</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">Node<sp/>[/gazebo]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/link_states<sp/>[gazebo_msgs/LinkStates]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/model_states<sp/>[gazebo_msgs/ModelStates]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/odom<sp/>[nav_msgs/Odometry]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/camera_info<sp/>[sensor_msgs/CameraInfo]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw<sp/>[sensor_msgs/Image]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressed<sp/>[sensor_msgs/CompressedImage]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressed/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressed/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressedDepth<sp/>[sensor_msgs/CompressedImage]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressedDepth/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressedDepth/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/theora<sp/>[theora_image_transport/Packet]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/theora/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/theora/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/parameter_descriptions<sp/>[dynamic_reconfigure/ConfigDescription]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/parameter_updates<sp/>[dynamic_reconfigure/Config]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/scan<sp/>[sensor_msgs/LaserScan]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/tf<sp/>[tf2_msgs/TFMessage]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/cmd_vel<sp/>[geometry_msgs/Twist]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_link_state<sp/>[unknown<sp/>type]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_model_state<sp/>[unknown<sp/>type]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/list_controller_types</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/list_controllers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/load_controller</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/reload_controller_libraries</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/switch_controller</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/controller_manager/unload_controller</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/apply_body_wrench</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/apply_joint_effort</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/clear_body_wrenches</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/clear_joint_forces</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/delete_light</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/delete_model</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_joint_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_light_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_link_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_link_state</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_model_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_model_state</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_physics_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/get_world_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/pause_physics</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/reset_simulation</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/reset_world</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_joint_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_light_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_link_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_link_state</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_logger_level</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_model_configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_model_state</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/set_physics_properties</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/spawn_sdf_model</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/spawn_urdf_model</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/gazebo/unpause_physics</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressed/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/compressedDepth/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw/theora/set_parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/set_camera_info</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/set_parameters</highlight></codeline>
</programlisting></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md24">
<title>The detectibot_magnifier.cpp node</title>
<para><image type="html" name="erl_assignment_3_detectibot_magnifier.jpg" inline="yes"></image>
 </para>
<para>This node is devoted to the detection of ARUCO&apos;s markers made through a single camera mounted on the front side of the robot. It also implements a service that allows for retrieving the IDs identified through Aruco.</para>
<para>For realising such a node, the <bold>vision_openCV</bold> package is needed. This node employs a bridge between OpenCV and ROS. Due to the fact that ROS sends Images in <computeroutput>sensor_msgs/Image</computeroutput> format, our goal is to obtain images in <computeroutput><ref refid="namespacecv__bridge" kindref="compound">cv_bridge</ref></computeroutput> format.</para>
<para>Node interfaces: <programlisting filename=".Plain"><codeline><highlight class="normal">Node<sp/>[/detectibot_magnifier]</highlight></codeline>
<codeline><highlight class="normal">Publications:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/rosout<sp/>[rosgraph_msgs/Log]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Subscriptions:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/clock<sp/>[rosgraph_msgs/Clock]</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/robot/camera1/image_raw<sp/>[sensor_msgs/Image]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Services:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/aruco_markers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/detectibot_magnifier/get_loggers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>/detectibot_magnifier/set_logger_level</highlight></codeline>
</programlisting></para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md25">
<title>Rqt_graph</title>
<para><image type="html" name="rosgraph_nodes_topics_all.png" inline="yes"></image>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md26">
<title>UML temporal diagram</title>
<para>By means of this diagram it is possible to show how the system works. As the <ref refid="namespacestate__machine" kindref="compound">state_machine</ref> gets launched, the robot enters the MOVE state, responsible for the activation of the <computeroutput>/go_to_point</computeroutput> service. Hence, it reaches the center of the room and it starts to collect as many marker as possible.</para>
<para>This has been made possible through the implementation of a <computeroutput>/turn_robot</computeroutput> service that, as the name explicitly suggests, makes detectibot turning around its own position. Only after, the system transitions to the CHECK state, where a request is made by the <computeroutput>/aruco_marker</computeroutput> service to retrieve the detected marker&apos;s IDs (by means of a topic subscription). Whenever a new hint gets detected, the knowledge base represented by <ref refid="namespacecluedo__kb" kindref="compound">cluedo_kb</ref> node is issued (with a <computeroutput>/oracle_hint</computeroutput> service request).</para>
<para>By means of a further request, made to the final_oracle node through the <computeroutput>/oracle_solution</computeroutput> service, the True ID gets compared and it is chosen whether to terminate the investigation (ending up in a MISTERY_SOLVED state) or pursuing it, transitioning back to the MOVE state</para>
<para><image type="html" name="erl_temporal_diagram.jpg" inline="yes"></image>
</para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md27">
<title>Summarizing working architecture</title>
<para>The hypothesis IDs are contained within Aruco markers. The True ID instead, is randomly chosen before starting the game.</para>
<para>Path planning, has been implemented using MoveBase package</para>
<para>The robot is equipped with a single camera, mounted frontally.</para>
<para>It is also equipped with laser range finders which make possible, together with Odometry data, to employ a SLAM gmapping algorithm. To ensure its employability, the following requirements were met:<itemizedlist>
<listitem><para>laser outputs are published onto <computeroutput>/scan</computeroutput> topic</para>
</listitem><listitem><para>the robot model is endowed with two frames required for mapping algorithms, which are: <computeroutput>link_chassis</computeroutput> and <computeroutput>odom</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>Concerning the Aruco detection, it has been implemented by the <bold>detectibotMagnifier</bold>. Indeed, ROS images messages are sent over <computeroutput>/robot/camera/image_raw</computeroutput> for being converted im a openCV handable format. This is done by means of <computeroutput><ref refid="namespacecv__bridge" kindref="compound">cv_bridge</ref></computeroutput> package.</para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md28">
<title>How to launch and additional documentation</title>
<para>Additional documentation of this project can be found opening in the browser the file *_build/html/index.html*</para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md29">
<title>Running the entire project</title>
<para>To test the <bold>project</bold>, first of all:</para>
<para><itemizedlist>
<listitem><para>Open a shell and run:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">roslaunch<sp/>erl_assignment_3_robot<sp/>detectibot_environment_2.launch<sp/>2&gt;/dev/null</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a second shell and run</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">roslaunch<sp/>erl_assignment_3<sp/>launch_nodes.launch</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a third shell and type:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>state_machine.py</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md30">
<title>Running the Navigation module</title>
<para>To test the navigation module, first of all:</para>
<para><itemizedlist>
<listitem><para>Open a shell and run:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">roslaunch<sp/>erl_assignment_3_robot<sp/>detectibot_environment_2.launch</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a second shell and run the navigation node</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>navigation.py</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md31">
<title>Running the Vision module</title>
<para>To test the vision module, first of all:</para>
<para><itemizedlist>
<listitem><para>Open a shell and run:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">roslaunch<sp/>erl_assignment_3_robot<sp/>detectibot_environment_2.launch</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a second shell and run</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>img_echo</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a third shell and type:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>detectibot_magnifier</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md32">
<title>Running the State machine module</title>
<para>To test the state machine&apos;s module , first of all:</para>
<para><itemizedlist>
<listitem><para>Open a shell and run:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">roslaunch<sp/>erl_assignment_3_robot<sp/>detectibot_environment.launch<sp/>2&gt;/dev/null</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a second shell and run</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>img_echo<sp/>&amp;</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>detectibot_magnifier<sp/>&amp;</highlight></codeline>
<codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>navigation.py</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a third shell and type:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>cluedo_kb.py</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Open a fourth shell and run:</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">rosrun<sp/>erl_assignment_3<sp/>state_machine.py</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md33">
<title>System&apos;s limitations</title>
<para>Here below, some of the major system limitations are listed:</para>
<para><itemizedlist>
<listitem><para>Adding cameras will mean to reconfigure <bold>detectibot_magnifier</bold> module. Camera data simulated is costly, it required a powerfull computer.</para>
</listitem><listitem><para>A significant numebrs of Aruco Markers are not perceived by the single camera. Modifying the orientation of the camera could be a solution or even better, endowing the manipulator arm with multiple cameras (with different pan and tilt) could work as well.</para>
</listitem><listitem><para>There&apos;s some issues with the move base evaluating the target: sometimes the robot remains stuck for a while before resuming navigation.</para>
</listitem><listitem><para>As already pointed out the simulation is very costly and required the use a powerful machine in order to run rapidly enough.</para>
</listitem></itemizedlist>
</para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md34">
<title>Possible technical Improvements</title>
<para><itemizedlist>
<listitem><para>The current KB is being chosen because there was problems and limitations in using ARMOR due to the nature of the generation flow of ID, decided a priori. By modification of the ID generation flow and by creating an interface in order to initially filter the data, it is fair to say that the integration with ARMOR would be preferable.</para>
</listitem><listitem><para>The navigation system using move_base still has some limitations and seems to fatigue in reaching certain positions and orientations.</para>
</listitem><listitem><para>The current robot model is quite unstable. It should be adjusted so that it does not oscillate during its movements. This is due to the simplicity of its mobile base with respect to the shape of its robotic arm. A more robust and stable model should eliminate some of these issues.</para>
</listitem><listitem><para>Possible improvements in the manipulation controls used by MoveIt for obtaining a better, more robust, more precise manipulation.</para>
</listitem><listitem><para>Possible code and computational improvements in order to further reduce the cost of execution</para>
</listitem></itemizedlist>
</para>
<para>(<ulink url="#top">back to top</ulink>)</para>
</sect1>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md35">
<title>Contact</title>
<para>Iacopo Pietrasanta - <ulink url="mailto:s4119821@studenti.unige.it">s4119821@studenti.unige.it</ulink></para>
<para>Project Link: <ulink url="https://github.com/HolyStone95/ExperimentalRoboticsAssignment3">https://github.com/HolyStone95/ExperimentalRoboticsAssignment3</ulink> </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
